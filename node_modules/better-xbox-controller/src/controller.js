// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, Stick, XBoxController, config, createStateObject, fs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events');

  Stick = require('./stick');

  fs = require('fs');

  config = JSON.parse(fs.readFileSync(__dirname + '/config.json'));

  createStateObject = function() {
    var data, k, ref, v;
    data = {
      button: {},
      trigger: {
        r: 0x00,
        l: 0x00
      },
      stick: {
        r: new Stick(0, 0),
        l: new Stick(0, 0)
      }
    };
    ref = config.button;
    for (k in ref) {
      v = ref[k];
      data.button[k] = false;
    }
    return data;
  };

  XBoxController = (function(superClass) {
    extend(XBoxController, superClass);

    function XBoxController(device) {
      var k, ref, v;
      this.device = device;
      this._sendData = bind(this._sendData, this);
      this.setRumbler = bind(this.setRumbler, this);
      this.setLed = bind(this.setLed, this);
      this.close = bind(this.close, this);
      this.open = bind(this.open, this);
      this.dead = 6000;
      this.LED = {};
      ref = config.led;
      for (k in ref) {
        v = ref[k];
        this.LED[k] = k;
      }
    }

    XBoxController.prototype.open = function() {
      var ep, i, inputHandler, inputInterface, k, led, ledHandler, len, ref, ref1, v;
      if (this.device == null) {
        return this.emit('error', 'No Controller Set!');
      }
      this.device.open();
      inputInterface = this.device["interface"](0);
      if (inputInterface.isKernelDriverActive()) {
        inputInterface.detachKernelDriver();
      }
      inputInterface.claim();
      led = [];
      ref = this.LED;
      for (k in ref) {
        v = ref[k];
        led[v] = k;
      }
      ref1 = inputInterface.endpoints;
      for (i = 0, len = ref1.length; i < len; i++) {
        ep = ref1[i];
        if (ep.direction === 'in') {
          this["in"] = ep;
        } else {
          this.out = ep;
        }
      }
      this.state = createStateObject();
      this["in"].startPoll();
      inputHandler = (function(_this) {
        return function(data) {
          var actual, buttonChange, d, event, ref2, stick, stickChange, triggerChange, x, y;
          buttonChange = false;
          d = data.readUInt16BE(2);
          ref2 = config.button;
          for (k in ref2) {
            v = ref2[k];
            actual = (d & v) > 0;
            if (_this.state.button[k] !== actual) {
              _this.state.button[k] = actual;
              event = 'button:' + k;
              _this.emit(event, actual);
              _this.emit('button', k, actual);
              buttonChange = true;
            }
          }
          triggerChange = false;
          if (_this.state.trigger.l !== data[4]) {
            _this.state.trigger.l = data[4];
            triggerChange = true;
            _this.emit('trigger:left', data[4]);
          }
          if (_this.state.trigger.r !== data[5]) {
            _this.state.trigger.r = data[5];
            triggerChange = true;
            _this.emit('trigger:right', data[5]);
          }
          if (triggerChange) {
            _this.emit('trigger', _this.state.trigger);
          }
          stickChange = false;
          x = data.readInt16LE(6);
          y = data.readInt16LE(8);
          if (_this.dead > Math.sqrt(x * x + y * y)) {
            x = y = 0;
          }
          stick = new Stick(x, y);
          if (!stick.isEqual(_this.state.stick.l)) {
            _this.state.stick.l = stick;
            _this.emit('stick:left', stick);
            stickChange = true;
          }
          x = data.readInt16LE(10);
          y = data.readInt16LE(12);
          if (_this.dead > Math.sqrt(x * x + y * y)) {
            x = y = 0;
          }
          stick = new Stick(x, y);
          if (!stick.isEqual(_this.state.stick.r)) {
            _this.state.stick.r = stick;
            _this.emit('stick:right', stick);
            stickChange = true;
          }
          if (stickChange) {
            _this.emit('stick', _this.state.stick);
          }
          if (buttonChange || triggerChange || stickChange) {
            return _this.emit('all', _this.state);
          }
        };
      })(this);
      ledHandler = (function(_this) {
        return function(data) {
          var state;
          state = data[3];
          return _this.emit('led', led[state]);
        };
      })(this);
      return this["in"].on('data', function(data) {
        if (data[0] === 0x00 && data[1] === 0x14) {
          return inputHandler(data);
        } else if (data[0] === 0x01 && data[1] === 0x03) {
          return ledHandler(data);
        } else if (data[0] === 0x08 && data[1] === 0x03) {
          return this.emit('headset', data[2] ? true : false);
        } else {
          return console.log(data);
        }
      });
    };

    XBoxController.prototype.close = function() {
      return this.device.close();
    };

    XBoxController.prototype.setLed = function(state) {
      var buf;
      state = config.led[state];
      if (state == null) {
        throw new Error("Unknown LED state! '" + state + "'");
      }
      buf = new Buffer([0x01, 0x03, state]);
      return this._sendData(buf);
    };

    XBoxController.prototype.setRumbler = function(heavy, light) {
      var buf;
      heavy = Math.min(Math.max(heavy, 0), 255);
      light = Math.min(Math.max(light, 0), 255);
      buf = new Buffer([0, 8, 0, heavy, light, 0, 0, 0]);
      return this._sendData(buf);
    };

    XBoxController.prototype._sendData = function(buf) {
      return this.out.transfer(buf, function(err) {
        if (err) {
          return this.emit('error', err);
        }
      });
    };

    return XBoxController;

  })(EventEmitter);

  module.exports = XBoxController;

}).call(this);
